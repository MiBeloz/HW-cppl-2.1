#include <iostream>

//Я бы не стал подключать пространство имен 'std', так как при этом может возникнуть конфликт имен.
//using namespace std;

//Имена структур и классов лучше писать с большой буквы: 'Point' вместо 'point'.
//Так же структуру/класс лучше создать в отдельном файле или библиотеке и подключить.
//В идеале, структуру или класс прописать в Header-файле, а его методы и функции в файле-cpp.
//struct point {
struct Point {

	//Параметры конструктора лучше сделать константными, а так же лучше воспользоваться списком инициализации членов.
	//Также лучше использовать 'explicit'.
	//point(double x, double y) {
	explicit Point(const int x, const int y) : m_x(x), m_y(y) {

		//К тому же, была ошибка в названии переменной: 'y' вместо 'm_y'.
		//m_x = x;
		//y = y;
	}

	//Здесь я бы дописал геттеры.
	int get_x() const { return m_x; }
	int get_y() const { return m_y; }

	//Переменные нужно держать закрытыми и в самом низу структуры или класса.
	//Если переменные предполагается инициализировать как 'int'(как в этой программе),
	//переменные структуры/класса тоже лучше сделать 'int'.
private:
	//double m_x;
	//double m_y;
	int m_x;
	int m_y;

	//В конце структур и классов нужно ставить ';'.
//}
};

//Тут должно быть только объявление функции.
void print_point(const Point& point_object); //{
//	std::cout << "x:" << point_object.m_x << ", y: " << point_object.m_y << std::endl;
//}

//Функция 'main' должа начинаться с маленькой буквы.
//int Main()
int main() {
	//Нет смысла объявлять переменную вне цикла, если она используется только в цикле. Еще лучше, если она в цикле, объявить ее типа 'size_t'.
	//int i;

	//После условия в цикле не ставится ';', иначе этот цикл будет бесполезен. Лучше использовать префиксный инкремент.
	//for (i = 0; i < 5; i++); {
	for (size_t i = 0; i < 5; ++i) {

		//Создавать объект структуры/класса лучше вне цикла, т.к. за циклом он виден уже не будет. Но для примера работы программы - пусть :).
		//Поскольку 'i' - это тип 'size_t', можно явно преобразовать ее к типу 'int'. Однако это не обязательно, тут прекрасно отработает неявное преобразование.
		//Point my_point(i, 2 * i);
		Point my_point(static_cast<int>(i), static_cast<int>(2 * i));
		print_point(my_point);
	}

	system("pause > nul"); //Чтоб консольное окно не закрывалось сразу после исполнения программы.
	return 0;
}

void print_point(const Point& point_object) {

	//Вместо 'x:' лучше будет смотреться 'x: '.
	std::cout << "x: " << point_object.get_x() << ", y: " << point_object.get_y() << std::endl;
}

//Ну и хорошо бы использовать единый стиль в коде.
//Например: здесь все функции и цикл выглядели так:
//void print_point(const Point& point_object) {
//	...
//}
//а главная функция 'main' так:
//int main()
//{
//	...
//}
